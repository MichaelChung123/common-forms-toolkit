{
	"info": {
		"_postman_id": "94f16df2-a126-4d5b-ab55-a3f5ad761e63",
		"name": "ForestrySectorOperatorScreening_v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search Forms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f76a70d-d86d-43ee-94d8-d0f31d2dafdc",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/forms?slug=forestry&public=true&active=true&name=forestry&keyword=forestry",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"forms"
					],
					"query": [
						{
							"key": "slug",
							"value": "forestry"
						},
						{
							"key": "public",
							"value": "true"
						},
						{
							"key": "active",
							"value": "true"
						},
						{
							"key": "name",
							"value": "forestry"
						},
						{
							"key": "keyword",
							"value": "forestry"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Current Form Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9dc12583-540c-41fd-8718-18275524fb0b",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('metadata');",
							"    pm.expect(jsonData.metadata).to.have.property('slug');",
							"    pm.expect(jsonData.metadata.slug).to.equal(pm.collectionVariables.get('slug'));",
							"    pm.collectionVariables.set('formVersionId',jsonData.versions[0].formVersionId);",
							"    pm.collectionVariables.set('formDefinition', JSON.stringify(jsonData));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Operation Types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e7cfa5b-85da-4594-9636-3900fed8e0fb",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
							"    pm.collectionVariables.set('operationTypes', jsonData);",
							"    // we want OTHER ordered last...",
							"    pm.expect(jsonData[jsonData.length-1]).to.have.property('type', 'OTHER');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/types",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"types"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "188d8990-6154-46df-a4ca-d3348ccfe196",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type', 'SPACING');",
							"    pm.expect(jsonData).to.have.property('operationType');",
							"    pm.expect(jsonData.operationType.type).to.equal(jsonData.type);",
							"    pm.collectionVariables.set('submissionId', jsonData.submissionId);",
							"    pm.collectionVariables.set('confirmationId', jsonData.confirmationId);",
							"    pm.collectionVariables.set('submission', jsonData);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"attestation\": {\n\t\t\"guidelinesRead\": true,\n\t\t\"assessmentCompleted\": true,\n\t\t\"developedPlan\": true,\n\t\t\"protectionSignage\": true,\n\t\t\"workerContactPersonnel\": true,\n\t\t\"commonAreaDistancing\": true,\n\t\t\"sleepingAreaType\": \"SHARED\",\n\t\t\"sharedSleepingPerRoom\": 7,\n\t\t\"sharedSleepingDistancing\": true,\n\t\t\"selfIsolateUnderstood\": true,\n\t\t\"selfIsolateAccommodation\": true,\n\t\t\"laundryServices\": true,\n\t\t\"wasteManagementGloves\": true,\n\t\t\"wasteManagementSchedule\": true,\n\t\t\"wasteManagementBags\": true,\n\t\t\"handWashingStations\": true,\n\t\t\"handWashingSoapWater\": true,\n\t\t\"handWashingWaterless\": true,\n\t\t\"handWashingPaperTowels\": true,\n\t\t\"handWashingSignage\": true,\n\t\t\"distancingMaintained\": true,\n\t\t\"distancingFaceShields\": true,\n\t\t\"disinfectingSchedule\": true,\n\t\t\"educationSignage\": true,\n\t\t\"educationContactPersonnel\": true,\n\t\t\"trainingCovid19\": true,\n\t\t\"trainingEtiquette\": true,\n\t\t\"trainingLocations\": true,\n\t\t\"trainingFirstAid\": true,\n\t\t\"trainingReporting\": true,\n\t\t\"mealsDistancing\": true,\n\t\t\"mealsDishware\": true,\n\t\t\"mealsDishwashing\": true,\n\t\t\"infectionSeparation\": true,\n\t\t\"infectionSymptoms\": true,\n\t\t\"infectionHeathLinkBC\": true,\n\t\t\"infectionSanitization\": true,\n\t\t\"infectionAccommodation\": true,\n\t\t\"infectedFeeding\": true,\n\t\t\"infectedHousekeeping\": true,\n\t\t\"infectedWaste\": true,\n\t\t\"certifyAccurateInformation\": true,\n\t\t\"agreeToInspection\": true\n\t},\n\t\"business\": {\n\t\t\"name\": \"ZZ Smoke Testing\",\n\t\t\"orgBookId\": null,\n\t\t\"addressLine1\": \"1234 Here St\",\n\t\t\"addressLine2\": null,\n\t\t\"city\": \"Saanich\",\n\t\t\"province\": \"BC\",\n\t\t\"postalCode\": \"ABCDEF\"\t\n\t},\n\t\"contacts\":[\n\t\t{\n\t\t\t\"contactType\": \"PRIMARY\",\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"phone1\": \"1234567890\",\n\t\t\t\"phone2\": \"\",\n\t\t\t\"email\": \"jane@doe.com\"\n\t\t},\n\t    {\t\t\t\n\t\t\t\"contactType\": \"COVID_COORDINATOR\",\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"lastName\": \"D'oh\",\n\t\t\t\"phone1\": \"0987654321\",\n\t\t\t\"phone2\": \"\",\n\t\t\t\"email\": \"john@doh.com\"\n\t\t}\n\t],\n\t\"location\": {\n\t\t\"startDate\": \"2020-05-10\",\n\t\t\"endDate\": \"2020-07-30\",\n\t\t\"city\": \"Victoria, BC\",\n\t\t\"cityLatitude\": null,\n\t\t\"cityLongitude\": null,\n\t\t\"numberOfWorkers\": 10,\n\t\t\"accTents\": true,\n\t\t\"tentDetails\": \"Tents pitched on motel parking lot\",\n\t\t\"accMotel\": true,\n\t\t\"motelName\": \"Heartbreak Hotel\",\n\t\t\"motelAddressLine1\": \"2345 Everywhere\",\n\t\t\"motelAddressLine2\": \"\",\n\t\t\"motelCity\": \"Victoria\",\n\t\t\"motelProvince\": \"BC\",\n\t\t\"motelPostalCode\": \"123123\",\n\t\t\"accWorkersHome\": true,\n\t\t\"licencees\": \"Ministry of Forests\"\n\t},\n\t\"type\": \"SPACING\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a87d88d-0e2b-44d5-8f1b-3f4e73c6347b",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData).to.have.property('operationType');",
							"    pm.expect(jsonData.operationType.type).to.equal(jsonData.type);",
							"",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.operationType.type).to.equal(pm.collectionVariables.get('submission').type);",
							"",
							"    pm.collectionVariables.set('formVersionId', jsonData.formVersionId);",
							"    pm.collectionVariables.set('operationType', jsonData.operationType.type);",
							"    pm.collectionVariables.set('operationTypeDisplay', jsonData.operationType.display);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Submissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f605d900-ee9d-43fa-89cc-0f99b4b2cf69",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('operationTypeDisplay');",
							"    pm.expect(jsonData.operationTypeDisplay).to.equal(pm.collectionVariables.get('operationTypeDisplay'));",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions?version={{formVersionId}}&city=Vic&business=ZZ&confirmationId={{confirmationId}}&type={{operationType}}&tiny=true",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					],
					"query": [
						{
							"key": "version",
							"value": "{{formVersionId}}"
						},
						{
							"key": "city",
							"value": "Vic"
						},
						{
							"key": "business",
							"value": "ZZ"
						},
						{
							"key": "confirmationId",
							"value": "{{confirmationId}}"
						},
						{
							"key": "type",
							"value": "{{operationType}}"
						},
						{
							"key": "tiny",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status (with notes)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2efc6cde-ebaa-4fd3-b9ca-1392b9c97ddf",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.not.be.null;",
							"    pm.expect(jsonData.code).to.equal('ASSIGNED');",
							"    pm.expect(jsonData.notes).to.be.an('array');",
							"    pm.expect(jsonData.notes).to.have.lengthOf(1);",
							"    pm.expect(jsonData.notes[0].note).to.equal('Status level note for smoke testing.')",
							"    pm.collectionVariables.set('submissionStatusId', jsonData.submissionStatusId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"Jason Sherman\",\n\t\"assignedToEmail\": \"jsherman@parcsystems.ca\",\n\t\"actionDate\": \"2020-06-01\",\n\t\"notes\": [\n\t\t{\n\t\t\t\"note\": \"Status level note for smoke testing.\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status (with invalid classification)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6094540c-8b42-4636-94fd-80c99f5cf63f",
						"exec": [
							"pm.test(\"422 response\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"COMPLETED\",\n\t\"assignedTo\": \"Jason Sherman\",\n\t\"assignedToEmail\": \"jsherman@parcsystems.ca\",\n\t\"actionDate\": \"2020-06-01\",\n\t\"notes\": [\n\t\t{\n\t\t\t\"note\": \"Status level note for smoke testing.\"\n\t\t}\n\t],\n\t\"classification\": \"This is a bad classification value\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Statuses",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "021e3025-ab5a-4a58-ab54-96cb9a5686a3",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Added status is first in list\", function () {",
							"    // assumes this is run after Add Status (with notes)",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"ME!\",\n\t\"notes\": [{\"note\": \"voila!\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Submission Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a30a6650-432c-4efe-ac35-8920f41dc9c8",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.note).to.equal('Submission level note for smoke testing.');",
							"    pm.collectionVariables.set('submissionNoteId', jsonData.noteId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"Submission level note for smoke testing.\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ce66f944-0756-455c-a913-2af0b3ce820a",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Added note is first in list\", function () {",
							"    // assumes this is run after Add Submission Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.submissionId).to.not.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.noteId).to.equal(pm.collectionVariables.get('submissionNoteId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"this note is for the submission\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3bf2f265-81f8-484c-b9d7-127ced3c9db8",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"    pm.expect(jsonData.submissionId).to.be.null;",
							"    pm.expect(jsonData.note).to.equal('Additional Status level note.');",
							"    pm.collectionVariables.set('statusNoteId', jsonData.noteId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3ccface7-0b76-4698-85d3-a9264e588ed2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"Additional Status level note.\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses/{{submissionStatusId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses",
						"{{submissionStatusId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3b3c65b-dab0-4a45-9d43-6982c1821901",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Note belongs to status\", function () {",
							"    // assumes this is run after Add Status Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.submissionId).to.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.not.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"    pm.expect(jsonData.noteId).to.equal(pm.collectionVariables.get('statusNoteId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"ME!\",\n\t\"notes\": [{\"note\": \"voila!\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses/{{submissionStatusId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses",
						"{{submissionStatusId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status Codes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f592a77-1885-4059-86cf-75ac48c9985a",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Items are status codes\", function () {",
							"    // assumes this is run after Add Status Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData).to.have.property('display');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('nextCodes');",
							"    pm.expect(jsonData.code).to.not.be.null;",
							"    pm.expect(jsonData.display).to.not.be.null;",
							"    pm.expect(jsonData.enabled).to.not.be.null;",
							"    pm.expect(jsonData.nextCodes).to.not.be.null;",
							"    pm.expect(jsonData.enabled).to.be.an('boolean');",
							"    pm.expect(jsonData.nextCodes).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current/statusCodes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current",
						"statusCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Status Codes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6a0e2607-236d-4534-bf9d-1c4ad632b95b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a41a67be-afa0-4c81-8f9f-e9457ea11833",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"code\": \"SUBMITTED\",\n        \"display\": \"Submitted\",\n        \"enabled\": true,\n        \"nextCodes\": [\"ASSIGNED\",\"COMPLETED\"]\n    },\n    {\n        \"code\": \"ASSIGNED\",\n        \"display\": \"Assigned\",\n        \"enabled\": true,\n        \"nextCodes\": [\"COMPLETED\"],\n        \"allowedClassifications\":[\"OK\"]\n    },\n    {\n        \"code\": \"COMPLETED\",\n        \"display\": \"Completed\",\n        \"enabled\": true,\n        \"nextCodes\": [],\n        \"allowedClassifications\":[\"Pass\",\"Fail\"]\n    },\n    {\n        \"code\": \"SMOKE_TEST_STATUS_A\",\n        \"display\": \"Smoke test Status A (enabled)\",\n        \"enabled\": true,\n        \"nextCodes\": [\"COMPLETED\",\"SMOKE_TEST_STATUS_B\"]\n    },\n    {\n        \"code\": \"SMOKE_TEST_STATUS_B\",\n        \"display\": \"Smoke test Status B (not enabled)\",\n        \"enabled\": false,\n        \"nextCodes\": [\"COMPLETED\",\"SMOKE_TEST_STATUS_A\",\"ONLY_REAL_CODES_ARE_ADDED\"]\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current/statusCodes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current",
						"statusCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Submission",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bab70a57-2b6d-4447-8958-023a758ca8b9",
						"exec": [
							"var submission = pm.collectionVariables.get('submission');",
							"console.log(submission);",
							"var data = submission;",
							"data.location.city='Victoria, TX';",
							"data.business.name='ZZ Smoke Testing 2.0';",
							"data.contacts[0].email='first@contact.ca';",
							"data.contacts[1].email='second@contact.ca';",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedSubmission\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "01281d29-18f3-46bb-99f2-f9383f2ba7bd",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the updated item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    ",
							"    pm.expect(jsonData.location.city).to.equal('Victoria, TX');",
							"    pm.expect(jsonData.business.name).to.equal('ZZ Smoke Testing 2.0');",
							"    pm.expect(jsonData.contacts[0].email).to.equal('first@contact.ca');",
							"    pm.expect(jsonData.contacts[1].email).to.equal('second@contact.ca');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedSubmission}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Form Definition",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "40c25792-15e9-4eb7-bebb-e9a08263ef04",
						"exec": [
							"var formDefinition = pm.collectionVariables.get('formDefinition');",
							"console.log(formDefinition);",
							"var data = JSON.parse(formDefinition);",
							"data.description = 'Description updated';",
							"data.metadata.name = 'Forestry Form v2';",
							"data.versions = [",
							"    {",
							"        changes: 'this is a new version', ",
							"        statusCodes: [",
							"            {code: 'A', display: 'Aa', enabled: true, nextCodes: ['B'], allowedClassifications: [\"Good\", \"Bad\", \"Ugly\"]},",
							"            {code: 'B', display: 'Bb', enabled: true, nextCodes: ['A']}",
							"            ]",
							"    }];",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedFormDefinition\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "34be7aa5-ecb2-4bde-b9fa-1a62e783c65c",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.description).to.equal('Description updated');",
							"    pm.expect(jsonData.metadata.name).to.equal('Forestry Form v2');",
							"    pm.expect(jsonData.metadata.slug).to.equal(pm.collectionVariables.get('slug'));",
							"    pm.expect(jsonData.versions[0].formVersionId).to.be.above(pm.collectionVariables.get('formVersionId'));",
							"    pm.expect(jsonData.versions[0].statusCodes[0].code).to.equal('A');",
							"    ",
							"    pm.collectionVariables.set('formVersionId',jsonData.versions[0].formVersionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedFormDefinition}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0fe4b46-9d9d-4349-bb1c-d264c04cae40",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(2);",
							"});",
							"pm.test(\"Returns the correct items\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('config');",
							"    pm.expect(jsonData.config).to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Setting confirmationEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5a9ebce-d0f1-4104-98a1-ca4cdffb21d2",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('config');",
							"    pm.expect(jsonData.config).to.be.an('object');",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.collectionVariables.set('confirmationEmail', JSON.stringify(jsonData));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Setting confirmationEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d37bbd8-73d5-42ac-9f99-c01093ec4b9f",
						"exec": [
							"var confirmationEmail = pm.collectionVariables.get('confirmationEmail');",
							"console.log(confirmationEmail);",
							"var data = JSON.parse(confirmationEmail);",
							"data.enabled = false;",
							"data.config.to = 'newem@il.com';",
							"data.config.subject ='Ignore this please';",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedConfirmationEmail\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a654ed4-0a17-4255-8734-1a259eea1483",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.expect(jsonData.enabled).to.equal(false);",
							"    pm.expect(jsonData.config.to).to.equal('newem@il.com');",
							"    pm.expect(jsonData.config.subject).to.equal('Ignore this please');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedConfirmationEmail}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Setting confirmationEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9af944da-fd35-4293-ba0d-474cb96e65eb",
						"exec": [
							"var confirmationEmail = pm.collectionVariables.get('confirmationEmail');",
							"console.log(confirmationEmail);",
							"var data = JSON.parse(confirmationEmail);",
							"pm.collectionVariables.set(\"resetConfirmationEmail\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3d3cc627-dd59-4198-96b5-69ce3c8b6381",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.expect(jsonData.enabled).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{resetConfirmationEmail}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission PDF",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/pdf",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"pdf"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04c7f1f9-af42-4815-9d74-46d1e13c336d",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.deleted).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Submissions (Deleted)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "271f0976-cb5c-408d-9e8e-b076ce5474e6",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.deleted).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions?deleted=true&confirmationId={{confirmationId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					],
					"query": [
						{
							"key": "deleted",
							"value": "true"
						},
						{
							"key": "confirmationId",
							"value": "{{confirmationId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJrdFJRN3VLZ3hYVU91cjdiaDRseGl1TGlUdVhzM3FyZEpzZFBnLTdvY1FnIn0.eyJqdGkiOiI5YTZhZmJkNC0yODNiLTQwOWQtOTM4Ni0wZjNkNWYyODFkNTEiLCJleHAiOjE1OTEyMDYzMjIsIm5iZiI6MCwiaWF0IjoxNTkxMjA2MDIyLCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvY3AxcWx5MmQiLCJhdWQiOlsiY29tZm9ydCIsImNvbWZvcnQtZnJvbnRlbmQiLCJjb21mb3J0LWZyb250ZW5kLWxvY2FsIiwiY29tZm9ydC1mb3Jlc3RyeXNlY3Rvcm9wc2NyZWVuaW5nIiwiY29tZm9ydC10ZXN0Y2FzZSIsImNvbWZvcnQtbWluZXNvcGVyYXRvcnNjcmVlbmluZyJdLCJzdWIiOiI2OTM4NDVmZS05OGZmLTRjNzEtOGEwOS04NWEzNDYwZGQzNzIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjb21mb3J0LWZyb250ZW5kLWxvY2FsIiwibm9uY2UiOiIyMTMzZjllMC1kM2UwLTQ4MmUtODk2YS0xMmY0ZWY1YjQ2MGIiLCJhdXRoX3RpbWUiOjE1OTEyMDU2ODIsInNlc3Npb25fc3RhdGUiOiJjZDE0NWY4MS0xODI5LTQ0ZmYtYTM3Yy0zN2UzYjIxMGQxMjQiLCJhY3IiOiIwIiwicmVzb3VyY2VfYWNjZXNzIjp7ImNvbWZvcnQtZm9yZXN0cnlzZWN0b3JvcHNjcmVlbmluZyI6eyJyb2xlcyI6WyJlZGl0b3IiLCJ2aWV3ZXIiLCJhZG1pbiIsInJldmlld2VyIl19LCJjb21mb3J0LXRlc3RjYXNlIjp7InJvbGVzIjpbImVkaXRvciIsInZpZXdlciIsImFkbWluIiwicmV2aWV3ZXIiXX0sImNvbWZvcnQtZnJvbnRlbmQtbG9jYWwiOnsicm9sZXMiOlsiRnJvbnRlbmQgRGV2ZWxvcGVyIiwiZGV2ZWxvcGVyIl19LCJjb21mb3J0LW1pbmVzb3BlcmF0b3JzY3JlZW5pbmciOnsicm9sZXMiOlsidmlld2VyIiwiZWRpdG9yIiwiYWRtaW4iLCJyZXZpZXdlciJdfSwiY29tZm9ydCI6eyJyb2xlcyI6WyJhZG1pbiIsInVzZXIiXX19LCJzY29wZSI6Im9wZW5pZCBjb21mb3J0LWZyb250ZW5kIGNvbWZvcnQgY29tZm9ydC1mcm9udGVuZC1sb2NhbCIsIm5hbWUiOiJKYXNvbiBTaGVybWFuIiwicHJlZmVycmVkX3VzZXJuYW1lIjoianNoZXJtYW5AaWRpciIsImVtYWlsIjoianNoZXJtYW5AcGFyY3N5c3RlbXMuY2EifQ.QH4jkQxuoyH8jFZbyTy57XEToDqAJyAs9Mr_Quy7fBt1dXhTTwZozJ5WA2ox1IG7is0rE4ofNRXZ_RVLsNv6s3ann7z-M_wbmzoJJC9oBfh5gbx8wS--onNwa2y4hubpNKW06v14m5WrOcpmt4aetdE1p5U6s9eyKWbg_fEqJj84jIQNJxz3ZSx5Z4vpj16TnBDRuBdyIMCy8rw8zGmJh0H7EKA_nY-kb7uPwhCqGArId785Qjs86SK_pQvoj3ZWek1SARyvOw0qAN-Vrm7in8sXXgxegOd_yFbvCWJnQ5qYvKbgmtIvQiPRaCnHrosxiG7IIEE-FwtqmPXAxnzfsA",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4c73438d-a2a5-4b5e-8f86-b76a6e6f79f8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0c760473-affa-4f15-b374-76d94ed2bf5f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "199cda64-d656-48f3-8add-70a2a5e50fc1",
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"id": "20428e77-acc9-4378-ae02-26e9caf3364d",
			"key": "path",
			"value": "app",
			"type": "string"
		},
		{
			"id": "10f5aac2-b4f1-4a1c-aaab-3513c21b7889",
			"key": "slug",
			"value": "forestrysectoropscreening",
			"type": "string"
		},
		{
			"id": "695ad3ba-4e66-478f-a644-93b67c3c07e8",
			"key": "formDefinition",
			"value": "{\"formId\":\"c6a406f8-c347-474e-af85-53bedb6cd786\",\"description\":\"Description updated\",\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:55.841Z\",\"metadata\":{\"formId\":\"c6a406f8-c347-474e-af85-53bedb6cd786\",\"name\":\"Forestry Form v2\",\"slug\":\"forestrysectoropscreening\",\"public\":true,\"active\":true,\"keywords\":[\"covid\",\"attestation\",\"attestations\",\"forestry\",\"operator\",\"screening\"],\"prefix\":\"forsec_os\",\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"migration-012\",\"updatedAt\":\"2020-06-04T15:34:55.834Z\"},\"versions\":[{\"formVersionId\":6,\"formId\":\"c6a406f8-c347-474e-af85-53bedb6cd786\",\"changes\":\"this is a new version\",\"createdBy\":\"development\",\"createdAt\":\"2020-06-04T15:34:55.878Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:34:55.830Z\",\"statusCodes\":[{\"code\":\"A\",\"display\":\"Aa\",\"enabled\":true,\"nextCodes\":[\"B\"],\"allowedClassifications\":[\"Good\",\"Bad\",\"Ugly\"],\"createdBy\":\"development\",\"createdAt\":\"2020-06-03T23:09:23.617Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:55.869Z\"},{\"code\":\"B\",\"display\":\"Bb\",\"enabled\":true,\"nextCodes\":[\"A\"],\"allowedClassifications\":null,\"createdBy\":\"development\",\"createdAt\":\"2020-06-03T23:09:23.617Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:55.869Z\"}]}],\"formVersionId\":6}",
			"type": "string"
		},
		{
			"id": "87389b3f-0989-488c-825a-879ae0ce2b7f",
			"key": "formVersionId",
			"value": 7,
			"type": "number"
		},
		{
			"id": "ca548c35-0fcd-4736-bdd8-0f26cf70531e",
			"key": "operationTypes",
			"value": [
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Brushing",
					"enabled": true,
					"type": "BRUSHING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Cone Picking",
					"enabled": true,
					"type": "CONE_PICKING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Engineering",
					"enabled": true,
					"type": "ENGINEERING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Layout/Timber Cruising",
					"enabled": true,
					"type": "LAYOUT",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Logging",
					"enabled": true,
					"type": "LOGGING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Pruning",
					"enabled": true,
					"type": "PRUNING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Research",
					"enabled": true,
					"type": "RESEARCH",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Silviculture",
					"enabled": true,
					"type": "SILVICULTURE",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Spacing",
					"enabled": true,
					"type": "SPACING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Surveying",
					"enabled": true,
					"type": "SURVEYING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Vegetation Management",
					"enabled": true,
					"type": "VEGETATION_MANAGEMENT",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Wildfire Camps",
					"enabled": true,
					"type": "WILDFIRE_CAMPS",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Other",
					"enabled": true,
					"type": "OTHER",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				}
			],
			"type": "any"
		},
		{
			"id": "f8c4067a-3eb8-4f3c-836e-e607a4f4f0c6",
			"key": "confirmationId",
			"value": "1938A8FB",
			"type": "string"
		},
		{
			"id": "75d74fca-6f8a-4e29-b08e-2773cbe98c55",
			"key": "submission",
			"value": {
				"attestation": {
					"agreeToInspection": true,
					"assessmentCompleted": true,
					"attestationId": "7ba65f70-9eb3-41ff-acd4-aa04cf374498",
					"certifyAccurateInformation": true,
					"commonAreaDistancing": true,
					"createdAt": "2020-06-04T15:36:40.913Z",
					"createdBy": "public",
					"developedPlan": true,
					"disinfectingSchedule": true,
					"distancingFaceShields": true,
					"distancingMaintained": true,
					"educationContactPersonnel": true,
					"educationSignage": true,
					"guidelinesRead": true,
					"handWashingPaperTowels": true,
					"handWashingSignage": true,
					"handWashingSoapWater": true,
					"handWashingStations": true,
					"handWashingWaterless": true,
					"infectedFeeding": true,
					"infectedHousekeeping": true,
					"infectedWaste": true,
					"infectionAccommodation": true,
					"infectionHeathLinkBC": true,
					"infectionSanitization": true,
					"infectionSeparation": true,
					"infectionSymptoms": true,
					"laundryServices": true,
					"mealsDishware": true,
					"mealsDishwashing": true,
					"mealsDistancing": true,
					"protectionSignage": true,
					"selfIsolateAccommodation": true,
					"selfIsolateUnderstood": true,
					"sharedSleepingDistancing": true,
					"sharedSleepingPerRoom": 7,
					"sleepingAreaType": "SHARED",
					"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
					"trainingCovid19": true,
					"trainingEtiquette": true,
					"trainingFirstAid": true,
					"trainingLocations": true,
					"trainingReporting": true,
					"updatedAt": "2020-06-04T15:36:40.887Z",
					"updatedBy": null,
					"wasteManagementBags": true,
					"wasteManagementGloves": true,
					"wasteManagementSchedule": true,
					"workerContactPersonnel": true
				},
				"business": {
					"addressLine1": "1234 Here St",
					"addressLine2": null,
					"businessId": 7,
					"city": "Saanich",
					"createdAt": "2020-06-04T15:36:40.913Z",
					"createdBy": "public",
					"name": "ZZ Smoke Testing",
					"orgBookId": null,
					"postalCode": "ABCDEF",
					"province": "BC",
					"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
					"updatedAt": "2020-06-04T15:36:40.887Z",
					"updatedBy": null
				},
				"confirmationId": "1938A8FB",
				"contacts": [
					{
						"contactId": 13,
						"contactType": "PRIMARY",
						"createdAt": "2020-06-04T15:36:40.913Z",
						"createdBy": "public",
						"email": "jane@doe.com",
						"firstName": "Jane",
						"lastName": "Doe",
						"phone1": "1234567890",
						"phone2": "",
						"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
						"updatedAt": "2020-06-04T15:36:40.887Z",
						"updatedBy": null
					},
					{
						"contactId": 14,
						"contactType": "COVID_COORDINATOR",
						"createdAt": "2020-06-04T15:36:40.913Z",
						"createdBy": "public",
						"email": "john@doh.com",
						"firstName": "John",
						"lastName": "D'oh",
						"phone1": "0987654321",
						"phone2": "",
						"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
						"updatedAt": "2020-06-04T15:36:40.887Z",
						"updatedBy": null
					}
				],
				"createdAt": "2020-06-04T15:36:40.906Z",
				"createdBy": "public",
				"deleted": false,
				"formVersionId": 6,
				"location": {
					"accMotel": true,
					"accTents": true,
					"accWorkersHome": true,
					"city": "Victoria, BC",
					"cityLatitude": null,
					"cityLongitude": null,
					"createdAt": "2020-06-04T15:36:40.913Z",
					"createdBy": "public",
					"endDate": "2020-07-30",
					"licencees": "Ministry of Forests",
					"locationId": 7,
					"motelAddressLine1": "2345 Everywhere",
					"motelAddressLine2": "",
					"motelCity": "Victoria",
					"motelName": "Heartbreak Hotel",
					"motelPostalCode": "123123",
					"motelProvince": "BC",
					"numberOfWorkers": 10,
					"startDate": "2020-05-10",
					"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
					"tentDetails": "Tents pitched on motel parking lot",
					"updatedAt": "2020-06-04T15:36:40.887Z",
					"updatedBy": null
				},
				"notes": [],
				"operationType": {
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-010",
					"display": "Spacing",
					"enabled": true,
					"type": "SPACING",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				"statuses": [
					{
						"actionDate": null,
						"assignedTo": null,
						"assignedToEmail": null,
						"classification": null,
						"code": "SUBMITTED",
						"createdAt": "2020-06-04T15:36:40.925Z",
						"createdBy": "public",
						"notes": [],
						"statusCode": {
							"allowedClassifications": [],
							"code": "SUBMITTED",
							"createdAt": "2020-06-03T22:06:37.610Z",
							"createdBy": "migration-010",
							"display": "Submitted",
							"enabled": true,
							"nextCodes": [
								"ASSIGNED",
								"COMPLETED"
							],
							"updatedAt": "2020-06-03T23:09:23.326Z",
							"updatedBy": "development"
						},
						"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
						"submissionStatusId": 11,
						"updatedAt": "2020-06-04T15:36:40.887Z",
						"updatedBy": null
					}
				],
				"submissionId": "1938a8fb-124d-4e94-bd05-6e172c459d55",
				"type": "SPACING",
				"updatedAt": "2020-06-04T15:36:40.887Z",
				"updatedBy": null
			},
			"type": "any"
		},
		{
			"id": "50d1ac5e-726c-4c6b-992c-78bfe606f569",
			"key": "submissionId",
			"value": "1938a8fb-124d-4e94-bd05-6e172c459d55",
			"type": "string"
		},
		{
			"id": "3493fa3b-341e-475d-a9fe-4b921c298b9f",
			"key": "operationType",
			"value": "SPACING",
			"type": "string"
		},
		{
			"id": "1122990e-7dea-4159-88cd-605e50a5453d",
			"key": "operationTypeDisplay",
			"value": "Spacing",
			"type": "string"
		},
		{
			"id": "70087d15-cbd1-44b2-9c10-794eb0ffbffe",
			"key": "submissionStatusId",
			"value": 12,
			"type": "number"
		},
		{
			"id": "25d5729e-1476-4509-8187-2267f789f226",
			"key": "submissionNoteId",
			"value": 16,
			"type": "number"
		},
		{
			"id": "8efa9cb4-efc1-40de-b17e-ffc7a5d8ab75",
			"key": "statusNoteId",
			"value": 17,
			"type": "number"
		},
		{
			"id": "1e7c1548-f344-46b6-bb98-e37459006708",
			"key": "changedSubmission",
			"value": "{\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"formVersionId\":6,\"confirmationId\":\"1938A8FB\",\"type\":\"SPACING\",\"deleted\":false,\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.906Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\",\"operationType\":{\"type\":\"SPACING\",\"display\":\"Spacing\",\"enabled\":true,\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T22:06:37.610Z\"},\"business\":{\"businessId\":7,\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"name\":\"ZZ Smoke Testing 2.0\",\"orgBookId\":null,\"addressLine1\":\"1234 Here St\",\"addressLine2\":null,\"city\":\"Saanich\",\"province\":\"BC\",\"postalCode\":\"ABCDEF\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.913Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\"},\"attestation\":{\"attestationId\":\"7ba65f70-9eb3-41ff-acd4-aa04cf374498\",\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"guidelinesRead\":true,\"assessmentCompleted\":true,\"developedPlan\":true,\"protectionSignage\":true,\"workerContactPersonnel\":true,\"commonAreaDistancing\":true,\"sleepingAreaType\":\"SHARED\",\"sharedSleepingPerRoom\":7,\"sharedSleepingDistancing\":true,\"selfIsolateUnderstood\":true,\"selfIsolateAccommodation\":true,\"laundryServices\":true,\"wasteManagementGloves\":true,\"wasteManagementSchedule\":true,\"wasteManagementBags\":true,\"handWashingStations\":true,\"handWashingSoapWater\":true,\"handWashingWaterless\":true,\"handWashingPaperTowels\":true,\"handWashingSignage\":true,\"distancingMaintained\":true,\"distancingFaceShields\":true,\"disinfectingSchedule\":true,\"educationSignage\":true,\"educationContactPersonnel\":true,\"trainingCovid19\":true,\"trainingEtiquette\":true,\"trainingLocations\":true,\"trainingFirstAid\":true,\"trainingReporting\":true,\"mealsDistancing\":true,\"mealsDishware\":true,\"mealsDishwashing\":true,\"infectionSeparation\":true,\"infectionSymptoms\":true,\"infectionHeathLinkBC\":true,\"infectionSanitization\":true,\"infectionAccommodation\":true,\"infectedFeeding\":true,\"infectedHousekeeping\":true,\"infectedWaste\":true,\"certifyAccurateInformation\":true,\"agreeToInspection\":true,\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.913Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\"},\"contacts\":[{\"contactId\":13,\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"contactType\":\"PRIMARY\",\"firstName\":\"Jane\",\"lastName\":\"Doe\",\"phone1\":\"1234567890\",\"phone2\":\"\",\"email\":\"first@contact.ca\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.913Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\"},{\"contactId\":14,\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"contactType\":\"COVID_COORDINATOR\",\"firstName\":\"John\",\"lastName\":\"D'oh\",\"phone1\":\"0987654321\",\"phone2\":\"\",\"email\":\"second@contact.ca\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.913Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\"}],\"location\":{\"locationId\":7,\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"startDate\":\"2020-05-10\",\"endDate\":\"2020-07-30\",\"city\":\"Victoria, TX\",\"cityLatitude\":null,\"cityLongitude\":null,\"numberOfWorkers\":10,\"accTents\":true,\"tentDetails\":\"Tents pitched on motel parking lot\",\"accMotel\":true,\"motelName\":\"Heartbreak Hotel\",\"motelAddressLine1\":\"2345 Everywhere\",\"motelAddressLine2\":\"\",\"motelCity\":\"Victoria\",\"motelProvince\":\"BC\",\"motelPostalCode\":\"123123\",\"accWorkersHome\":true,\"licencees\":\"Ministry of Forests\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.913Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\"},\"notes\":[],\"statuses\":[{\"submissionStatusId\":11,\"submissionId\":\"1938a8fb-124d-4e94-bd05-6e172c459d55\",\"code\":\"SUBMITTED\",\"assignedTo\":null,\"assignedToEmail\":null,\"actionDate\":null,\"classification\":null,\"createdBy\":\"public\",\"createdAt\":\"2020-06-04T15:36:40.925Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:36:40.887Z\",\"notes\":[],\"statusCode\":{\"code\":\"SUBMITTED\",\"display\":\"Submitted\",\"enabled\":true,\"nextCodes\":[\"ASSIGNED\",\"COMPLETED\"],\"allowedClassifications\":[],\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:09:23.326Z\"}}]}",
			"type": "string"
		},
		{
			"id": "93b2be5c-41a1-4fa0-96ba-0982ed57da3d",
			"key": "changedFormDefinition",
			"value": "{\"formId\":\"c6a406f8-c347-474e-af85-53bedb6cd786\",\"description\":\"Description updated\",\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:55.841Z\",\"metadata\":{\"formId\":\"c6a406f8-c347-474e-af85-53bedb6cd786\",\"name\":\"Forestry Form v2\",\"slug\":\"forestrysectoropscreening\",\"public\":true,\"active\":true,\"keywords\":[\"covid\",\"attestation\",\"attestations\",\"forestry\",\"operator\",\"screening\"],\"prefix\":\"forsec_os\",\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"migration-012\",\"updatedAt\":\"2020-06-04T15:34:55.834Z\"},\"versions\":[{\"changes\":\"this is a new version\",\"statusCodes\":[{\"code\":\"A\",\"display\":\"Aa\",\"enabled\":true,\"nextCodes\":[\"B\"],\"allowedClassifications\":[\"Good\",\"Bad\",\"Ugly\"]},{\"code\":\"B\",\"display\":\"Bb\",\"enabled\":true,\"nextCodes\":[\"A\"]}]}],\"formVersionId\":6}",
			"type": "string"
		},
		{
			"id": "cc0b4800-89e4-4478-9553-d476badd2daa",
			"key": "confirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":true,\"config\":{\"to\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"from\":\"FP.Engagement@gov.bc.ca\",\"title\":\"Forestry Sector Form Accepted\",\"subject\":\"Forestry Sector Form Accepted\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.apps.silver.devops.gov.bc.ca/app/forestrysectoropscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Forestry Sector Attestation\"},\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:56.175Z\"}",
			"type": "string"
		},
		{
			"id": "119a4e6c-b870-4b7f-94a3-cbcda0078180",
			"key": "changedConfirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":false,\"config\":{\"to\":\"newem@il.com\",\"from\":\"FP.Engagement@gov.bc.ca\",\"title\":\"Forestry Sector Form Accepted\",\"subject\":\"Ignore this please\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.apps.silver.devops.gov.bc.ca/app/forestrysectoropscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Forestry Sector Attestation\"},\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:56.175Z\"}",
			"type": "string"
		},
		{
			"id": "3c5d9774-e946-4ba2-b188-8200ca2b8a1e",
			"key": "resetConfirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":true,\"config\":{\"to\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"from\":\"FP.Engagement@gov.bc.ca\",\"title\":\"Forestry Sector Form Accepted\",\"subject\":\"Forestry Sector Form Accepted\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.apps.silver.devops.gov.bc.ca/app/forestrysectoropscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Forestry Sector Attestation\"},\"createdBy\":\"migration-010\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-04T15:34:56.175Z\"}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
